<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.yk.blog.data.dao.BlogMapper">

    <resultMap id="blog" type="com.yk.blog.domain.dto.Blog">
        <id column="id" property="id"/>
        <result column="create_time" property="createTime"/>
        <result column="read_count" property="readCount"/>
        <result column="user_id" property="userId"/>
        <result column="title" property="title"/>
        <result column="content" property="content"/>
        <result column="like_count" property="likeCount"/>
        <result column="comment_count" property="commentCount"/>
    </resultMap>

    <select id="getMostInterviewedBlogList" resultMap="blog">
        select * from blog order by read_count desc limit 10
    </select>

    <select id="getBlogsByRandom" resultMap="blog">
        SELECT * FROM blog WHERE id >= ((SELECT MAX(id) FROM blog)-(SELECT MIN(id) FROM blog)) * RAND() + (SELECT MIN(id) FROM blog)  LIMIT #{n}
    </select>

    <select id="getBlogsByIds" resultMap="blog">
        select * from blog where id in
        <foreach collection="list" item="ids" open="(" separator="," close=")">
            #{ids}
        </foreach>
    </select>

    <delete id="deleteCommentByBlogId" parameterType="int">
        delete from comment where blog_id = #{blogId}
    </delete>

    <update id="updateBlogCommentCount">
        update blog set comment_count = #{commentCount} where id = #{id};
    </update>

    <select id="searchBlogs" resultMap="blog">
        select * from blog where title like '${content}'
    </select>

    <select id="getOwnerIdByBlogId" resultType="String">
        select user_id from blog where id = #{id};
    </select>

    <update id="updateReadCountByMap" parameterType="java.util.Map">
        update blog set read_count =
        <trim prefix="case" suffix="end" suffixOverrides=",">
            <foreach collection="map" index="index" item="item">
                when id = #{index} then #{item}
            </foreach>
            else read_count
        </trim>
    </update>

    <update id="updateLikeCount">
        update blog set like_count = #{likeCount} where id = #{id};
    </update>

    <select id="getBlogsByUserId" resultMap="blog" parameterType="java.lang.String">
        select * from blog where user_id = #{userId} order by create_time desc ;
    </select>

    <select id="getBlogById" parameterType="int" resultMap="blog">
        select * from blog where id = #{id};
    </select>

    <delete id="deleteBlog">
        delete from blog where id = #{id} and user_id = #{userId};
    </delete>

    <update id="updateBlog">
        update blog set title = #{blog.title},content = #{blog.content}  where id = #{blog.id} and user_id = #{blog.userId}
    </update>

    <insert id="createBlog" useGeneratedKeys="true" keyProperty="id" parameterType="com.yk.blog.domain.dto.Blog">
        insert into blog(create_time, user_id, title, content)
        values (#{createTime},#{userId},#{title},#{content})
    </insert>

</mapper>