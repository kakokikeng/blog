<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.yk.blog.data.dao.UserMapper">

    <resultMap id="user" type="com.yk.blog.domain.dto.User">
        <id column="id" property="id"/>
        <result column="user_name" property="userName"/>
        <result column="email" property="email"/>
        <result column="fans" property="fans"/>
        <result column="blogs" property="blogs"/>
        <result column="create_time" property="createTime"/>
        <result column="passwd" property="passwd"/>
        <result column="follows" property="follows"/>

    </resultMap>

    <select id="getUserIdByEmail" parameterType="java.lang.String" resultType="java.lang.String">
        select id from user where email = #{email};
    </select>

    <select id="getUsersByRandom" resultMap="user">
        SELECT * FROM user WHERE id >= ((SELECT MAX(id) FROM user)-(SELECT MIN(id) FROM user)) * RAND() + (SELECT MIN(id) FROM user)  LIMIT #{n}
    </select>

    <update id="updatePasswd">
        update user set passwd = #{newPasswd} where email = #{email};
    </update>

    <update id="updateFans">
        update user set fans = #{fansCount} where id = #{id};
    </update>

    <update id="updateFollows">
        update user set follows = #{followCount} where id = #{id};
    </update>


    <update id="updateBlogCountByUserId">
        update user set blogs = blogs + #{addCount} where id = #{id};
    </update>

    <insert id="insertUser" parameterType="com.yk.blog.domain.dto.User">
        insert into user
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="userName != null">
                user_name,
            </if>
            <if test="email != null">
                email,
            </if>
            <if test="passwd != null">
                passwd,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
        </trim>
        values
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id},
            </if>
            <if test="userName != null">
                #{userName},
            </if>
            <if test="email != null">
                #{email},
            </if>
            <if test="passwd != null">
                #{passwd},
            </if>
            <if test="createTime != null">
                #{createTime},
            </if>
        </trim>
    </insert>

    <delete id="deleteUser" parameterType="java.lang.String">
        delete from user where email = #{email};
    </delete>

    <update id="updateUser">
        update user
        <set>
            <if test="user.userName != null">
                user_name = #{user.userName},
            </if>
            <if test="user.email != null">
                email = #{user.email},
            </if>
        </set>
        where id = #{id}
    </update>

    <select id="getUserListByIdList" parameterType="java.util.List" resultMap="user">
        select * from user where id in
        <foreach collection="list" item="item" open="(" close=")" separator=",">
            #{item}
        </foreach>
    </select>

    <select id="getUserByEmail" parameterType="java.lang.String" resultMap="user">
        select * from user where email = #{email};
    </select>

    <select id="existUser" parameterType="java.lang.String" resultType="java.lang.String">
        select id from user where id = #{id};
    </select>

    <select id="existUsers" parameterType="java.util.List" resultType="java.lang.String">
        select id from user where id in
        <foreach collection="list" item="item" open="(" close=")" separator=",">
            #{item}
        </foreach>
    </select>

</mapper>